# ======================================================
# HTTP: Allow Certbot challenge + Redirect everything else to HTTPS
# ======================================================
server {
    listen 80;
    listen [::]:80;
    server_name api.gridsparksolutions.com;

    # Root for Let's Encrypt challenge verification
    root /var/www/certbot;

    # Serve the ACME challenge files
    location /.well-known/acme-challenge/ {
        alias /var/www/certbot/.well-known/acme-challenge/;
        try_files $uri =404;
    }

    # Redirect all other traffic to HTTPS
    location / {
        return 301 https://$host$request_uri;
    }
}

# ======================================================
# HTTPS Server: Secure reverse proxy for Node.js app
# ======================================================
server {
    listen 443 ssl;
    listen [::]:443 ssl;
    http2 on;
    server_name api.gridsparksolutions.com;

    # === SSL Certificates ===
    ssl_certificate /etc/letsencrypt/live/api.gridsparksolutions.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/api.gridsparksolutions.com/privkey.pem;

    # Use modern, compatible TLS config
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers on;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 1h;

    # === Security Headers ===
    add_header X-Content-Type-Options "nosniff";
    add_header X-Frame-Options "SAMEORIGIN";
    add_header X-XSS-Protection "1; mode=block";
    add_header Referrer-Policy "strict-origin-when-cross-origin";
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

    # ======================================================
    # Proxy Configuration (to Node.js app)
    # ======================================================
    location / {
        # ===== CORS: Allow only your frontend domain =====
        set $cors_origin "";
        if ($http_origin ~* ^https?://(www\.)?gridsparksolutions\.com$) {
            set $cors_origin $http_origin;
        }

        add_header 'Access-Control-Allow-Origin' "$cors_origin" always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, PATCH, DELETE, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type' always;
        add_header 'Access-Control-Allow-Credentials' 'true' always;

        # Handle CORS preflight requests
        if ($request_method = OPTIONS) {
            add_header 'Access-Control-Allow-Origin' "$cors_origin" always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, PATCH, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Access-Control-Max-Age' 3600;
            return 204;
        }

        # ===== Reverse Proxy to Node.js app =====
        proxy_pass http://app:3000;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        proxy_connect_timeout 60s;
        proxy_send_timeout 120s;
        proxy_read_timeout 120s;
        proxy_buffering on;
    }

    # ======================================================
    # Gzip Compression
    # ======================================================
    gzip on;
    gzip_vary on;
    gzip_min_length 256;
    gzip_types
        text/plain
        text/css
        application/json
        application/javascript
        text/xml
        application/xml
        application/xml+rss
        text/javascript;

    # ======================================================
    # Logging
    # ======================================================
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log warn;
}
